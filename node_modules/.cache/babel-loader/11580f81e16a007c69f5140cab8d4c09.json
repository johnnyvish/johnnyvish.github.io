{"ast":null,"code":"var _jsxFileName = \"/Users/johnnyvishnevskiy/Desktop/chordtrainer.com/src/components/Piano.js\",\n    _s = $RefreshSig$();\n\nimport { useState } from 'react';\nimport WhiteKey from './WhiteKey';\nimport BlackKey from './BlackKey';\nimport Screen from './Screen';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nfunction Piano() {\n  _s();\n\n  const [text, setText] = useState('');\n  const [active, setActive] = useState('');\n\n  if (navigator.requestMIDIAccess) {\n    navigator.requestMIDIAccess().then(onMIDISuccess, onMIDIFailure);\n  }\n\n  function onMIDISuccess(midiAccess) {\n    const inputs = midiAccess.inputs;\n    inputs.forEach(input => {\n      input.addEventListener('midimessage', onMIDIMessage);\n    });\n  }\n\n  function onMIDIFailure() {\n    console.log('Could not access your MIDI devices.');\n  }\n\n  function onMIDIMessage(event) {\n    let note = event.data[1];\n    let velocity = event.data[2];\n    let octave = Math.floor(note / 12) - 1;\n    let noteName = note % 12;\n    let noteNames = ['C', 'C#', 'D', 'D#', 'E', 'F', 'F#', 'G', 'G#', 'A', 'A#', 'B'];\n    let noteNameString = noteNames[noteName];\n    let noteString = noteNameString + octave;\n    setText(noteString);\n    setActive(noteString);\n  }\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"piano\",\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"controller\",\n      children: /*#__PURE__*/_jsxDEV(Screen, {\n        text: text\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 47,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 46,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"keys\",\n      children: [/*#__PURE__*/_jsxDEV(WhiteKey, {\n        note: \"A0\",\n        setText: setText,\n        active: active\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 51,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(BlackKey, {\n        note: \"A#0\",\n        setText: setText,\n        active: active\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 52,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 50,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 45,\n    columnNumber: 5\n  }, this);\n}\n\n_s(Piano, \"b6Mwmt+XouzOvEgpNRoXMG5Qsuc=\");\n\n_c = Piano;\nexport default Piano;\n\nvar _c;\n\n$RefreshReg$(_c, \"Piano\");","map":{"version":3,"names":["useState","WhiteKey","BlackKey","Screen","Piano","text","setText","active","setActive","navigator","requestMIDIAccess","then","onMIDISuccess","onMIDIFailure","midiAccess","inputs","forEach","input","addEventListener","onMIDIMessage","console","log","event","note","data","velocity","octave","Math","floor","noteName","noteNames","noteNameString","noteString"],"sources":["/Users/johnnyvishnevskiy/Desktop/chordtrainer.com/src/components/Piano.js"],"sourcesContent":["import {useState} from 'react';\nimport WhiteKey from './WhiteKey'\nimport BlackKey from './BlackKey'\nimport Screen from './Screen'\n\nfunction Piano() {\n\n  const [text, setText] = useState('')\n  const [active, setActive] = useState('')\n\n  if (navigator.requestMIDIAccess) {\n    navigator.requestMIDIAccess().then(onMIDISuccess, onMIDIFailure);\n  }\n\n  function onMIDISuccess(midiAccess) {\n\n    const inputs = midiAccess.inputs;\n\n    inputs.forEach(input => {\n        input.addEventListener('midimessage', onMIDIMessage);\n    }\n    )\n  }\n\n  function onMIDIFailure() {\n    console.log('Could not access your MIDI devices.');\n  }\n\n  function onMIDIMessage(event) {\n    let note = event.data[1];\n    let velocity = event.data[2];\n    \n    let octave = Math.floor(note / 12) - 1;\n    let noteName = note % 12;\n    let noteNames = ['C', 'C#', 'D', 'D#', 'E', 'F', 'F#', 'G', 'G#', 'A', 'A#', 'B'];\n    let noteNameString = noteNames[noteName];\n    let noteString = noteNameString + octave;\n    setText(noteString);\n    setActive(noteString);\n    \n  }\n\n\n  return (\n    <div className='piano'>\n      <div className='controller'>\n        <Screen text = {text}/>\n      </div>\n\n      <div className='keys'>\n        <WhiteKey note='A0' setText = {setText} active = {active}/>\n        <BlackKey note='A#0' setText = {setText} active = {active}/>\n\n    </div>\n  </div>\n  )\n}\n\nexport default Piano"],"mappings":";;;AAAA,SAAQA,QAAR,QAAuB,OAAvB;AACA,OAAOC,QAAP,MAAqB,YAArB;AACA,OAAOC,QAAP,MAAqB,YAArB;AACA,OAAOC,MAAP,MAAmB,UAAnB;;;AAEA,SAASC,KAAT,GAAiB;EAAA;;EAEf,MAAM,CAACC,IAAD,EAAOC,OAAP,IAAkBN,QAAQ,CAAC,EAAD,CAAhC;EACA,MAAM,CAACO,MAAD,EAASC,SAAT,IAAsBR,QAAQ,CAAC,EAAD,CAApC;;EAEA,IAAIS,SAAS,CAACC,iBAAd,EAAiC;IAC/BD,SAAS,CAACC,iBAAV,GAA8BC,IAA9B,CAAmCC,aAAnC,EAAkDC,aAAlD;EACD;;EAED,SAASD,aAAT,CAAuBE,UAAvB,EAAmC;IAEjC,MAAMC,MAAM,GAAGD,UAAU,CAACC,MAA1B;IAEAA,MAAM,CAACC,OAAP,CAAeC,KAAK,IAAI;MACpBA,KAAK,CAACC,gBAAN,CAAuB,aAAvB,EAAsCC,aAAtC;IACH,CAFD;EAID;;EAED,SAASN,aAAT,GAAyB;IACvBO,OAAO,CAACC,GAAR,CAAY,qCAAZ;EACD;;EAED,SAASF,aAAT,CAAuBG,KAAvB,EAA8B;IAC5B,IAAIC,IAAI,GAAGD,KAAK,CAACE,IAAN,CAAW,CAAX,CAAX;IACA,IAAIC,QAAQ,GAAGH,KAAK,CAACE,IAAN,CAAW,CAAX,CAAf;IAEA,IAAIE,MAAM,GAAGC,IAAI,CAACC,KAAL,CAAWL,IAAI,GAAG,EAAlB,IAAwB,CAArC;IACA,IAAIM,QAAQ,GAAGN,IAAI,GAAG,EAAtB;IACA,IAAIO,SAAS,GAAG,CAAC,GAAD,EAAM,IAAN,EAAY,GAAZ,EAAiB,IAAjB,EAAuB,GAAvB,EAA4B,GAA5B,EAAiC,IAAjC,EAAuC,GAAvC,EAA4C,IAA5C,EAAkD,GAAlD,EAAuD,IAAvD,EAA6D,GAA7D,CAAhB;IACA,IAAIC,cAAc,GAAGD,SAAS,CAACD,QAAD,CAA9B;IACA,IAAIG,UAAU,GAAGD,cAAc,GAAGL,MAAlC;IACApB,OAAO,CAAC0B,UAAD,CAAP;IACAxB,SAAS,CAACwB,UAAD,CAAT;EAED;;EAGD,oBACE;IAAK,SAAS,EAAC,OAAf;IAAA,wBACE;MAAK,SAAS,EAAC,YAAf;MAAA,uBACE,QAAC,MAAD;QAAQ,IAAI,EAAI3B;MAAhB;QAAA;QAAA;QAAA;MAAA;IADF;MAAA;MAAA;MAAA;IAAA,QADF,eAKE;MAAK,SAAS,EAAC,MAAf;MAAA,wBACE,QAAC,QAAD;QAAU,IAAI,EAAC,IAAf;QAAoB,OAAO,EAAIC,OAA/B;QAAwC,MAAM,EAAIC;MAAlD;QAAA;QAAA;QAAA;MAAA,QADF,eAEE,QAAC,QAAD;QAAU,IAAI,EAAC,KAAf;QAAqB,OAAO,EAAID,OAAhC;QAAyC,MAAM,EAAIC;MAAnD;QAAA;QAAA;QAAA;MAAA,QAFF;IAAA;MAAA;MAAA;MAAA;IAAA,QALF;EAAA;IAAA;IAAA;IAAA;EAAA,QADF;AAaD;;GAnDQH,K;;KAAAA,K;AAqDT,eAAeA,KAAf"},"metadata":{},"sourceType":"module"}